@model ZfssUZ.Models.Benefit.HomeLoanBenefit.AddHomeLoanBenefitModel

@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.AspNetCore.Identity
@using ZfssUZData.Models.Users

@inject IViewLocalizer Localizer
@inject UserManager<ApplicationUser> UserManager

@{
    object formLabel = new { style = "form-label" };
    object formControl = new { style = "form-control" };
    Context.Items["Title"] = Localizer["AddHomeLoanBenefitTitle"];
}

<script src="~/lib/jquery/dist/jquery.js"></script>
<h3>@Localizer["AddHomeLoanBenefitTitle"]</h3>
<hr />
<div class="row">
    <div class="col-md-5">
        <form asp-action="AddHomeLoanBenefit">
            <div asp-validation-summary="All" class="text-danger"></div>
            <div class="form-group">
                <input type="button" class="btn btn-default" id="GetUserData" value="@Localizer["GetUserData"]" onclick="getUserData()" />
                <input type="button" class="btn btn-default" id="showClause" value="@Localizer["Clause"]" />
                <div class="modal fade" id="clauseModal" role="dialog" data-url='@Url.Action("ShowClause", "Benefit")'></div>
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.BeneficiaryName, formLabel)
                @Html.TextBoxFor(x => x.BeneficiaryName, string.Empty, new { @class = formControl })
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.BeneficiaryAddress, formLabel)
                @Html.TextBoxFor(x => x.BeneficiaryAddress, string.Empty, new { @class = formControl })
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.BeneficiaryPhoneNumber, new { @class = formLabel })
                @Html.TextBoxFor(x => x.BeneficiaryPhoneNumber, string.Empty, new { @class = formControl })
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.LoanCost, new { @class = formLabel, })
                @Html.TextBoxFor(x => x.LoanCost, string.Empty, new { @class = formControl, @type = "number", @min = 1 })
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.LoanPurpose, new { @class = formLabel })
                @Html.TextBoxFor(x => x.LoanPurpose, string.Empty, new { @class = formControl })
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.Months, new { @class = formLabel })
                @Html.TextBoxFor(x => x.Months, string.Empty, new { @class = formControl, @type = "number", @min = 1})
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.Instalment, new { @class = formLabel })
                @Html.TextBoxFor(x => x.Instalment, string.Empty, new { @class = formControl, @readonly = "readonly",  @type = "number" })
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.BenefitType)
                @Html.DropDownListFor(x => x.BenefitType.Id, Model.BenefitTypeList, new { @class = formControl, @disabled = "disabled" })
            </div>

            <div class="form-group">
                <input type="submit" value="@Localizer["Create"]" class="btn btn-default" onclick="createBenefit()"/>
                <a asp-action="Index" asp-controller="Benefit" class="btn btn-default">@Localizer["Back"]</a>
            </div>
        </form>
    </div>
</div>
<script type="text/javascript" charset="utf-8">
    $(document).ready(function () {
        if ("@TempData["BenefitAddError"]" != null && "@TempData["BenefitAddError"]" != "" && "@TempData["BenefitAddError"]" != "Error") {
            alert("@Localizer["AddHomeLoanBenefitError"]" + "@TempData["BenefitAddError"]");
        }
    });

    $("#LoanCost").on("change paste keyup", function () {
        copyText();
    });

    $("#Months").on("change paste keyup", function () {
        copyText();
    });

    function getUserData() {
        $("#BeneficiaryName").val("@UserManager.GetUserAsync(User).Result.FirstName " +  "@UserManager.GetUserAsync(User).Result.LastName");
        $("#BeneficiaryAddress").val("@UserManager.GetUserAsync(User).Result.Address, " + "@UserManager.GetUserAsync(User).Result.PostCode " + "@UserManager.GetUserAsync(User).Result.City");
        $("#BeneficiaryPhoneNumber").val(@UserManager.GetUserAsync(User).Result.PhoneNumber);
    }

    function copyText() {
        var loanCost = document.getElementById("LoanCost");
        var months = document.getElementById("Months");

        if (months.value > 0 && loanCost.value > 0) {
            var instalment = (loanCost.value / months.value).toFixed(2);
            $("#Instalment").val(instalment);
        }
    }

    $('#showClause').click(function () {
        var url = $('#clauseModal').data('url');
        $.get(url, function (data) {
            $("#clauseModal").html(data);
            $("#clauseModal").modal('show');
        });
    });
</script>